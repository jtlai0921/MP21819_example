/*本程式藉由加速規與陀螺儀感測空間姿態並透過藍芽將資訊傳輸（ HC-06、HC-05）
#include "stm32f10x.h"
#include "stdio.h"
SCL = PB6 , SDA = PB7
TX = PA9 , RX = PA10
The value of （x,y,z） come from MPU6050 ACCELEROMETER
The value of （gx,gy,gz） come from MPU6050 GYROSCOPE
The value of （x,y,z） are in -2~+2 by AFS_SEL=0（16384 LSB/g）
The value of （gx,gy,gz） are in -250~+250 by FS_SEL=0 （131 LSB/
		（degree/s））
*/

#define I2C_ADDRESS_WRITE 0xD0 // MPU6050 I2C 從機端寫入位置
write（ADDR+W）

#define I2C_ADDRESS_READ 0xD1 // MPU6050 I2C 從機端讀取位置
  read（ADDR+R）

#define MPU6050_POWER_CONTROL 0x6B // 定義MPU6050 I2C 電源控制位置
#define MPU6050_SENSOR_DATA 0x3B //定義MPU6050 加速規資料位置

void Init_I2C( ) //I2C 通訊格式初始化
{
I2C_InitTypeDef I2C_InitStructure；
GPIO_InitTypeDef GPIO_InitStructure；

/* 致能 I2C */
I2C_Cmd（I2C1,ENABLE）；
/* 設定set I2C1 RCC 時鐘 */
RCC_APB1PeriphClockCmd（RCC_APB1Periph_I2C1, ENABLE）；
RCC_APB2PeriphClockCmd（RCC_APB2Periph_GPIOB, ENABLE）；





/* 設定I2C1 的SDA and SCL 腳位 */
/* PB6 = SCL ,PB7 = SDA */
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7；
GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz；
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD；
GPIO_Init（GPIOB, &GPIO_InitStructure）；

/* I2C 參數設定 */
I2C_InitStructure.I2C_Mode = I2C_Mode_SMBusHost；
I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2；
I2C_InitStructure.I2C_OwnAddress1 = 0x00； // STM32 I2C 自有位置
I2C_InitStructure.I2C_Ack = I2C_Ack_Enable；
I2C_InitStructure.I2C_AcknowledgedAddress =
			I2C_AcknowledgedAddress_7bit；
I2C_InitStructure.I2C_ClockSpeed = 100000 ； // 設定 I2C 時脈為 100KHz
I2C_Init（I2C1, &I2C_InitStructure）；
}

/* 起始訊號
*
*
* address --> 7 bit + write bit
* direction --> set to Tranmit or Receive
* I2C_Direction_Tranmitter Tranmit mode
* I2C_Direction_Receiver Receive mode
*/
void I2C_start（I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction）
{

while（I2C_GetFlagStatus（I2Cx, I2C_FLAG_BUSY））；
I2C_GenerateSTART（I2Cx, ENABLE）；
while（!I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_MODE_SELECT））；





// 送出從機位置寫入

I2C_Send7bitAddress（I2Cx, address, direction）；
if（direction == I2C_Direction_Transmitter）{
while（!I2C_CheckEvent（I2Cx,
		I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED））；
}
else if（direction == I2C_Direction_Receiver）{
while（!I2C_CheckEvent（I2Cx,
		I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED））；
}
}

/* 在從機裝置寫入一位元組**/
void I2C_write（I2C_TypeDef* I2Cx, uint8_t data）
{
I2C_SendData（I2Cx, data）；
while（!I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED））；
}
/* //由從機裝置讀取一位元組資料**/
uint8_t I2C_read_ack（I2C_TypeDef* I2Cx）
{
uint8_t data；
// 將觸發致能enable ack
I2C_AcknowledgeConfig（I2Cx, ENABLE）；
while（ !I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED） ）；
data = I2C_ReceiveData（I2Cx）；
return data；
}






/*由從機裝置讀取1 位元組資料且停止接收資料**/
uint8_t I2C_read_nack（I2C_TypeDef* I2Cx）
{
uint8_t data；
//將資料接收反饋訊號關閉
// 接收最後位元組後由NACK 產生停止狀態

I2C_AcknowledgeConfig（I2Cx, DISABLE）；
I2C_GenerateSTOP（I2Cx, ENABLE）；
//等待一位元組wait for 1 byte
while（ !I2C_CheckEvent（I2Cx,
I2C_EVENT_MASTER_BYTE_RECEIVED） ）；
//從I2C 暫存器讀取一位元組read 1 byte from I2C register
data = I2C_ReceiveData（I2Cx）；
return data；
}



/* 停止訊號
* 停止 I2C
*/
void I2C_stop（I2C_TypeDef* I2Cx）
{
I2C_GenerateSTOP（I2Cx, ENABLE）； // 停止I2C

}





/*
* 傳送字串到藍芽通訊UART（BT）
*/
void My_Usart1_Send（char *string）
{
while（*string）

{
USART_SendData（USART1, （unsigned short int） *string++）；
while （USART_GetFlagStatus（USART1,
USART_FLAG_TC） == RESET）；
}
}

/* UART 初始化
*
*/
void Init_UART( )
{
/******** Claim USART and GPIO Structure ********/
GPIO_InitTypeDef GPIO_InitStructure；//GPIO 結構初始化
USART_InitTypeDef USART_InitStructure；

/******** set GPIOA and USART1 RCC clock enalbe ********/
RCC_APB2PeriphClockCmd（RCC_APB2Periph_GPIOA|RCC_APB2Periph_USART1,
		ENABLE）；

/******** //設定 GPIOA 與USART1 RCC 時脈為致能狀態 ********/
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9；
GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz；
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP；

GPIO_Init（GPIOA, &GPIO_InitStructure）； //初始化 PA9

/******** 設定 PA10 = Rx 接收腳位 ********/
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10；
GPIO_InitStructure.GPIO_Mode =GPIO_Mode_IN_FLOATING；
GPIO_Init（GPIOA, &GPIO_InitStructure）； // Init PA10



/******** USART ********/

USART_InitStructure.USART_BaudRate = 9600；//
USART_InitStructure.USART_WordLength =
USART_WordLength_8b；
USART_InitStructure.USART_StopBits = USART_StopBits_1；
USART_InitStructure.USART_Parity = USART_Parity_No；
USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl
		_None；
USART_InitStructure.USART_Mode = USART_Mode_Rx |
USART_Mode_Tx；
USART_Init（USART1, &USART_InitStructure）； // Init UART1
USART_Cmd（USART1, ENABLE）； // enable USART1
}


/*************************************************************
* 將資料寫入暫存器
* 起始位置0xD0
  暫存器位置
  資料
  停止
*
*/
void writeReg（int reg, int value）
{
I2C_start（I2C1, I2C_ADDRESS_WRITE,
I2C_Direction_Transmitter）；
I2C_write（I2C1, reg）；
I2C_write（I2C1, value）；
I2C_stop（I2C1）；
}

/*************************************************************
* 讀取暫存器資料
* 起始位置0xD0
暫存器位置
停止
起始位置0xD1
讀取資料
最後1 個Bit
*/
int readReg（int reg）
{
int value；
I2C_start（I2C1, I2C_ADDRESS_WRITE,
I2C_Direction_Transmitter）；
I2C_write（I2C1, reg）；
I2C_stop（I2C1）；
I2C_start（I2C1, I2C_ADDRESS_READ, I2C_Direction_Transmitter）；
value = I2C_read_ack（I2C1）；
I2C_read_nack（I2C1）；
return value；
}

/* 由MPU6050 讀取空間姿態數值（MPU6050_SENSOR_DATA 佔14 位元組）
* 起始位置0xD0（寫入）, 寫入MPU6050_SENSOR_DATA（暫存器位置）,停止,起始 0xD1
		（讀取）,讀取14 位元組,nack
*/
int xla, xha, yla, yha, zla, zha,temph,templ,ghx,glx,ghy,gly,ghz,glz；
float x, y, z,gx,gy,gz；

void readValue( )
{
I2C_start（I2C1, I2C_ADDRESS_WRITE, I2C_Direction_Transmitter）；
I2C_write（I2C1, MPU6050_SENSOR_DATA）；
I2C_stop（I2C1）；
I2C_start（I2C1, I2C_ADDRESS_READ, I2C_Direction_Receiver）；
xha = I2C_read_ack（I2C1）；
xla = I2C_read_ack（I2C1）；
yha = I2C_read_ack（I2C1）；
yla = I2C_read_ack（I2C1）；
zha = I2C_read_ack（I2C1）；
zla = I2C_read_ack（I2C1）；
ghx = I2C_read_ack（I2C1）；
glx = I2C_read_ack（I2C1）；
ghy = I2C_read_ack（I2C1）；
gly = I2C_read_ack（I2C1）；
ghz = I2C_read_ack（I2C1）；
glz = I2C_read_ack（I2C1）；
I2C_read_nack（I2C1）；

//空間姿態數值資料串轉換
x = （（（short）（xha << 8）） + xla） / 16384.0F；
y = （（（short）（yha << 8）） + yla） / 16384.0F；
z = （（（short）（zha << 8）） + zla） / 16384.0F；
gx = （（（short）（ghx << 8）） + glx） / 131.0F；
gy = （（（short）（ghy << 8）） + gly） / 131.0F；
gz = （（（short）（ghz << 8）） + glz） / 131.0F；
}

int main( )
  {
    int i；
    char buff [] = ""；
    char buff1 [] = ""；
    char buff2 [] = ""；
    Init_I2C( )； // Initialize I2C
    Init_UART( )； // Initialize UART
    My_Usart1_Send（" Start \n"）；
    My_Usart1_Send（"******************\n"）；
    My_Usart1_Send（"Open MPU6050 Power ... \n"）；

writeReg（MPU6050_POWER_CONTROL, 0x00）； //將睡眠模式關閉
My_Usart1_Send（"Read Value ... \n"）；

while（1）
  {
    readValue( )；
    sprintf （buff, "X ： %f Y ： %f Z ： %f \n",x,y,z）；
    My_Usart1_Send（buff）；
    sprintf （buff1, "Gx： %f Gy ： %f Gz： %f \n",gx,gy,gz）；
    My_Usart1_Send（buff1）；
    for（i=0； i<100000； i++）；
    }
    }