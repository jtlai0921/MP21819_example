#include "stm32f10x.h"
#include "stdio.h"
#define I2C _ADDRESS_WRITE 0xD0 // MPU6050 I2C 從機寫入位置（ADDR+W）
#define I2C _ADDRESS_READ 0xD1 // MPU6050 I2C 從機讀取位置（ADDR+R）
#define MPU6050_POWER_CONTROL 0x6B // MPU6050 I2C 電源控制
#define MPU6050_SENSOR_DATA 0x3B //MPU-6050 感測資料暫存位置
/* 本程式讀取MPU6050 空間姿態訊號並應用UART 連接藍芽模組BT4.0（HC-06 Or HC-05）
將加速規、陀螺儀數值傳輸出去
SCL = PB6 , SDA = PB7
TX = PA9 , RX = PA10
  x,y,z 之空間姿態數值由MPU6050 的加速規讀取
  gx,gy,gz 之空間姿態數值由MPU6050 的陀螺儀讀取
  x,y,z 之空間姿態數值解析度 -2~+2 by AFS_SEL=0（16384 LSB/g）
gx,gy,gz 之空間姿態數值解析度 -250~+250 by FS_SEL=0 （131 LSB/（degree/s））
*/




void Init_I2C( )
{
  I2C_InitTypeDef I2C_InitStructure；
  GPIO_InitTypeDef GPIO_InitStructure；

  /* 致能I2C */
  I2C_Cmd（I2C1,ENABLE）；
  /* set I??C 1 RCC clock */
  RCC_APB1PeriphClockCmd（RCC_APB1Periph_I2C1, ENABLE）；
  RCC_APB2PeriphClockCmd（RCC_APB2Periph_GPIOB, ENABLE）；

  /* 設定 I2C SDA 與SCL 腳位 */
  /* PB6 = SCL ,PB7 = SDA */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7；
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz；
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD；
  GPIO_Init（GPIOB, &GPIO_InitStructure）；

  /* 設定 I2C 1 */
  I2C_InitStructure.I2C_Mode = I2C_Mode_SMBusHost；
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2；
  I2C_InitStructure.I2C_OwnAddress1 = 0x00； // I2C 自有位置
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable；
  I2C_InitStructure.I2C_AcknowledgedAddress =
		I2C_AcknowledgedAddress_7bit；
  I2C_InitStructure.I2C_ClockSpeed = 100000 ； // 設定 I??C 時鐘速度為 100K
  I2C_Init（I2C1, &I2C_InitStructure）；
}

/* 起始訊號
 *
 *
 * address --> 7 bit + write bit
 * direction --> set to Tranmit or Receive
 * I2C_Direction_Tranmitter Tranmit mode
 * I2C_Direction_Receiver Receive mode
 */
void I2C_start（I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction）{
  
  while（I2C_GetFlagStatus（I2Cx, I2C_FLAG_BUSY））；
  I2C_GenerateSTART（I2Cx, ENABLE）；
  while（!I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_MODE_SELECT））；
  
  // 傳送寫入從機位置
  I2C_Send7bitAddress（I2Cx, address, direction）；
  if（direction == I2C_Direction_Transmitter）
  {
  while（!I2C_CheckEvent（I2Cx,
		I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECT
  ED））；
  }
  else if（direction == I2C_Direction_Receiver）
  {
    while（!I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_
    SELECTED））；
  }
}

/* 寫入一位元組至從機
 *

 */
void I2C_write（I2C_TypeDef* I2Cx, uint8_t data）
{
  I2C_SendData（I2Cx, data）；

  while（!I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED））；
}

/* 由從機讀取一位元組
 *
 */
uint8_t I2C_read_ack（I2C_TypeDef* I2Cx）
{
  uint8_t data；
  I2C_AcknowledgeConfig（I2Cx, ENABLE）； //致能ACK 應答
  while（ !I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED） ）；
  data = I2C_ReceiveData（I2Cx）；
  return data；
}

/* //由從機裝置讀取一位元組資料,並停止接收資料
 *
 */
uint8_t I2C_read_nack（I2C_TypeDef* I2Cx）
{
  uint8_t data；



  I2C_AcknowledgeConfig（I2Cx, DISABLE）； // 取消讀取資料回報
  I2C_GenerateSTOP（I2Cx, ENABLE）； //致能I2C 產生停止信息
  //等待一位元組
  while（ !I2C_CheckEvent（I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED） ）；
  // 由I2C 暫存器讀取一個位元組
  data = I2C_ReceiveData（I2Cx）；
  return data；
}

/* Stop signal
 * stop I2C
 */
void I2C_stop（I2C_TypeDef* I2Cx）{
  // 停止 I2C
  I2C_GenerateSTOP（I2Cx, ENABLE）；
}

/*
 * 透過UART 傳送字串
 */
void My_Usart1_Send（char *string）
{
  while（*string）
{
 USART_SendData（USART1, （unsigned short int） *string++）；
 while （USART_GetFlagStatus（USART1, USART_FLAG_TC） == RESET）；
}
}

/* 初始化UART
 *
 */
void Init_UART( )
{
  /******** 宣告USART 與 GPIO 硬體結構 ********/
  GPIO_InitTypeDef GPIO_InitStructure；
  USART_InitTypeDef USART_InitStructure；

  /******** 設定GPIOA 與USART1 RCC 時鐘致能 ********/
  RCC_APB2PeriphClockCmd（RCC_APB2Periph_GPIOA|RCC_APB2Periph_USART1,
		ENABLE）；

  /******** 設定 PA9 = Tx 傳送腳位 ********/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9；
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz；
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP；

  GPIO_Init（GPIOA, &GPIO_InitStructure）； // Init PA9

  /******** 設定PA10 = Rx 接收腳位 ********/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10；
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING；
  GPIO_Init（GPIOA, &GPIO_InitStructure）； // Init PA10

  /******** 通用同步通訊USART ********/

  USART_InitStructure.USART_BaudRate = 9600；
  USART_InitStructure.USART_WordLength = USART_WordLength_8b；
  USART_InitStructure.USART_StopBits = USART_StopBits_1；
  USART_InitStructure.USART_Parity = USART_Parity_No；
  USART_InitStructure.USART_HardwareFlowControl =
		USART_HardwareFlowControl _None；
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx；
  USART_Init（USART1, &USART_InitStructure）； // Init UART1
  USART_Cmd（USART1, ENABLE）； // enable USART1
}



/*************************************************************
* //寫入資料至暫存器
* //啟始位置0xD0 , //暫存器位置 , //資料 , //停止
*
*/
void writeReg（int reg, int value）{
  I2C_start（I2C1, I2C_ADDRESS_WRITE, I2C_Direction_Transmitter）；
  I2C_write（I2C1, reg）；
  I2C_write（I2C1, value）；
  I2C_stop（I2C1）；
}

/*************************************************************
* //由暫存器讀取資料
* 0xD0 起始位置 ,暫存器位置, 停止 ,起始位置 0xD1, 讀取資料 , nack*/

int readReg（int reg）
{
  int value；
  I2C_start（I2C1, I2C_ADDRESS_WRITE, I2C_Direction_Transmitter）；
  I2C_write（I2C1, reg）；
  I2C_stop（I2C1）；
  I2C_start（I2C1, I2C_ADDRESS_READ, I2C_Direction_Transmitter）；
  value = I2C_read_ack（I2C1）；
  I2C_read_nack（I2C1）；
  return value；
}

/* 讀取MPU6050_SENSOR_DATA （14bytes）
 * 開始位置0xD0（write）, wirte MPU6050_SENSOR_DATA（register
		 address）,stop,start 0xD1（read）,read 14bytes,nack
 */
int xla, xha, yla, yha, zla, zha ,ghx,glx,ghy,gly,ghz,glz；
float x, y, z,gx,gy,gz,temp；

void readValue( )
{
    I2C_start（I2C1, I2C_ADDRESS_WRITE, I2C_Direction_Transmitter）；
    I2C_write（I2C1, MPU6050_SENSOR_DATA）；
    I2C_stop（I2C1）；
    I2C_start（I2C1, I2C_ADDRESS_READ, I2C_Direction_Receiver）；

    xha = I2C_read_ack（I2C1）；
    xla = I2C_read_ack（I2C1）；
    yha = I2C_read_ack（I2C1）；
    yla = I2C_read_ack（I2C1）；
    zha = I2C_read_ack（I2C1）；
    zla = I2C_read_ack（I2C1）；
    temph = I2C_read_ack（I2C1）；
  templ = I2C_read_ack（I2C1）；
  ghx = I2C_read_ack（I2C1）；
  glx = I2C_read_ack（I2C1）；
  ghy = I2C_read_ack（I2C1）；
  gly = I2C_read_ack（I2C1）；
  ghz = I2C_read_ack（I2C1）；
    glz = I2C_read_ack（I2C1）；
    I2C_read_nack（I2C1）；

    // 空間數值資料串列轉換
  x = （（（short）（xha << 8）） + xla） / 16384.0F；
  y = （（（short）（yha << 8）） + yla） / 16384.0F；
  z = （（（short）（zha << 8）） + zla） / 16384.0F；
    temp = （（（（short）（temph << 8）） + templ） / 340.0F） + 36.53F；
    gx = （（（short）（ghx << 8）） + glx） / 131.0F；
    gy = （（（short）（ghy << 8）） + gly） / 131.0F；
    gz = （（（short）（ghz << 8）） + glz） / 131.0F；
}

int main( )
{
    int i；
    char buff [] = ""；
  char buff1 [] = ""；
  char buff2 [] = ""；
  char buff3 [] = ""；
  char buff4 [] = ""；
  char buff5 [] = ""；
  char buff6 [] = ""；

    Init_I2C( )； // 初始化I2C
    Init_UART( )； // 初始化UART
    writeReg（MPU6050_POWER_CONTROL, 0x00）； // 取消睡眠模式

while（1）
{
  readValue( )；
  sprintf （buff,"%f\n",x）；
  if （x>0.2）
{
  sprintf （buff,"%f\n",x）；
  My_Usart1_Send（buff）；
}

if （y>0.2）
{
  sprintf （buff,"%f\n",y）；
  My_Usart1_Send（buff）；
}

if （z>0.2）
{
  sprintf （buff,"%f\n",z）；
  My_Usart1_Send（buff）；
}

if （gx>0.2）
{
  sprintf （buff,"%f\n",gx）；
  My_Usart1_Send（buff）；
}

if （gy>0.2）
{
  sprintf （buff,"%f\n",gy）；
  My_Usart1_Send（buff）；
}

if （gz>0.2）
{
  sprintf （buff,"%f\n",gz）；
  My_Usart1_Send（buff）；
}

}
}